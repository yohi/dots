# 設定セットアップ関連のターゲット

# VIMの設定をセットアップ
setup-vim:
	@echo "🖥️  VIMの設定をセットアップ中..."
	@mkdir -p $(HOME_DIR)/.vim
	@mkdir -p $(CONFIG_DIR)/nvim
	@mkdir -p $(CONFIG_DIR)/cspell
	@mkdir -p $(CONFIG_DIR)/denops_translate

	# Neovim設定ディレクトリ作成とシンボリックリンク
	@if [ -d "$(CONFIG_DIR)/nvim" ] && [ ! -L "$(CONFIG_DIR)/nvim" ]; then \
		echo "⚠️  既存のnvim設定をバックアップ中..."; \
		mv $(CONFIG_DIR)/nvim $(CONFIG_DIR)/nvim.backup.$$(date +%Y%m%d_%H%M%S); \
	fi
	@ln -sfn $(DOTFILES_DIR)/vim $(CONFIG_DIR)/nvim

	# 従来のVIM設定もリンク
	@ln -sfn $(DOTFILES_DIR)/vim/rc/vimrc $(HOME_DIR)/.vimrc
	@ln -sfn $(DOTFILES_DIR)/vim/rc/gvimrc $(HOME_DIR)/.gvimrc

	# 追加設定ディレクトリ
	@if [ -d "$(DOTFILES_DIR)/cspell" ]; then ln -sfn $(DOTFILES_DIR)/cspell $(CONFIG_DIR)/cspell; fi
	@if [ -d "$(DOTFILES_DIR)/vim/denops_translate" ]; then ln -sfn $(DOTFILES_DIR)/vim/denops_translate $(CONFIG_DIR)/denops_translate; fi

	@echo "✅ VIMの設定が完了しました。"

# ZSHの設定をセットアップ
setup-zsh:
	@echo "🐚 ZSHの設定をセットアップ中..."
	@mkdir -p $(DOTFILES_DIR)/zsh

	# Zinitのインストール
	@if [ ! -d "$(HOME_DIR)/.local/share/zinit" ]; then \
		echo "📦 Zinitをインストール中..."; \
		INSTALL_SCRIPT=$$(curl --fail --show-error --silent --location https://raw.githubusercontent.com/zdharma-continuum/zinit/HEAD/scripts/install.sh); \
		if [ $$? -ne 0 ]; then \
			echo "❌ エラー: Zinitインストールスクリプトのダウンロードに失敗しました"; \
			echo "   ネットワーク接続を確認してください"; \
			exit 1; \
		fi; \
		bash -c "$$INSTALL_SCRIPT"; \
		if [ $$? -ne 0 ]; then \
			echo "❌ エラー: Zinitのインストールに失敗しました"; \
			echo "   インストールスクリプトの実行でエラーが発生しました"; \
			exit 1; \
		fi; \
		echo "✅ Zinitのインストールが完了しました"; \
	fi

	# 既存のzshrc設定ファイルが存在する場合はそれを使用、ない場合は基本設定を作成
	@if [ ! -f "$(DOTFILES_DIR)/zsh/zshrc" ]; then \
		echo "# ZSH Configuration" > $(DOTFILES_DIR)/zsh/zshrc; \
		echo "# Generated by dotfiles Makefile" >> $(DOTFILES_DIR)/zsh/zshrc; \
		echo "" >> $(DOTFILES_DIR)/zsh/zshrc; \
		echo "# Enable Powerlevel10k instant prompt" >> $(DOTFILES_DIR)/zsh/zshrc; \
		echo 'if [[ -r "$${XDG_CACHE_HOME:-$$HOME/.cache}/p10k-instant-prompt-$${(%):-%n}.zsh" ]]; then' >> $(DOTFILES_DIR)/zsh/zshrc; \
		echo '  source "$${XDG_CACHE_HOME:-$$HOME/.cache}/p10k-instant-prompt-$${(%):-%n}.zsh"' >> $(DOTFILES_DIR)/zsh/zshrc; \
		echo 'fi' >> $(DOTFILES_DIR)/zsh/zshrc; \
		echo "" >> $(DOTFILES_DIR)/zsh/zshrc; \
		echo "# Homebrew PATH" >> $(DOTFILES_DIR)/zsh/zshrc; \
		echo 'export PATH="/home/linuxbrew/.linuxbrew/bin:$$PATH"' >> $(DOTFILES_DIR)/zsh/zshrc; \
		echo 'eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"' >> $(DOTFILES_DIR)/zsh/zshrc; \
		echo "" >> $(DOTFILES_DIR)/zsh/zshrc; \
		echo "# Zinit" >> $(DOTFILES_DIR)/zsh/zshrc; \
		echo 'ZINIT_HOME="$${XDG_DATA_HOME:-$${HOME}/.local/share}/zinit/zinit.git"' >> $(DOTFILES_DIR)/zsh/zshrc; \
		echo 'source "$${ZINIT_HOME}/zinit.zsh"' >> $(DOTFILES_DIR)/zsh/zshrc; \
		echo "" >> $(DOTFILES_DIR)/zsh/zshrc; \
		echo "# Load Powerlevel10k theme" >> $(DOTFILES_DIR)/zsh/zshrc; \
		echo 'zinit ice depth=1; zinit load romkatv/powerlevel10k' >> $(DOTFILES_DIR)/zsh/zshrc; \
		echo "" >> $(DOTFILES_DIR)/zsh/zshrc; \
		echo "# ZSH plugins" >> $(DOTFILES_DIR)/zsh/zshrc; \
		echo 'zinit load zsh-users/zsh-autosuggestions' >> $(DOTFILES_DIR)/zsh/zshrc; \
		echo 'zinit load zsh-users/zsh-syntax-highlighting' >> $(DOTFILES_DIR)/zsh/zshrc; \
		echo 'zinit load zsh-users/zsh-completions' >> $(DOTFILES_DIR)/zsh/zshrc; \
		echo "" >> $(DOTFILES_DIR)/zsh/zshrc; \
		echo "# Custom aliases" >> $(DOTFILES_DIR)/zsh/zshrc; \
		echo 'alias ll="ls -la"' >> $(DOTFILES_DIR)/zsh/zshrc; \
		echo 'alias la="ls -A"' >> $(DOTFILES_DIR)/zsh/zshrc; \
		echo 'alias l="ls -CF"' >> $(DOTFILES_DIR)/zsh/zshrc; \
		echo 'alias ..="cd .."' >> $(DOTFILES_DIR)/zsh/zshrc; \
		echo 'alias ...="cd ../.."' >> $(DOTFILES_DIR)/zsh/zshrc; \
		echo 'alias grep="grep --color=auto"' >> $(DOTFILES_DIR)/zsh/zshrc; \
		echo 'alias fgrep="fgrep --color=auto"' >> $(DOTFILES_DIR)/zsh/zshrc; \
		echo 'alias egrep="egrep --color=auto"' >> $(DOTFILES_DIR)/zsh/zshrc; \
		echo "" >> $(DOTFILES_DIR)/zsh/zshrc; \
		echo "# Development tools" >> $(DOTFILES_DIR)/zsh/zshrc; \
		echo 'export DOCKER_HOST=unix:///run/user/'$$(id -u)'/docker.sock' >> $(DOTFILES_DIR)/zsh/zshrc; \
		echo 'export PATH=$$HOME/bin:$$PATH' >> $(DOTFILES_DIR)/zsh/zshrc; \
		echo 'export PATH=$$PATH:/sbin' >> $(DOTFILES_DIR)/zsh/zshrc; \
	else \
		echo "✅ 既存のzshrc設定ファイルを使用します: $(DOTFILES_DIR)/zsh/zshrc"; \
	fi

	# P10k設定ファイルの確認（既存があればそれを使用）
	@if [ ! -f "$(DOTFILES_DIR)/zsh/p10k.zsh" ] && [ ! -f "$(HOME_DIR)/.p10k.zsh" ]; then \
		echo "# Powerlevel10k configuration generated by dotfiles Makefile" > $(DOTFILES_DIR)/zsh/p10k.zsh; \
		echo "# Run 'p10k configure' to customize" >> $(DOTFILES_DIR)/zsh/p10k.zsh; \
	elif [ -f "$(DOTFILES_DIR)/zsh/p10k.zsh" ]; then \
		echo "✅ 既存のp10k設定ファイルを使用します: $(DOTFILES_DIR)/zsh/p10k.zsh"; \
	fi

	# シンボリックリンクを作成
	@if [ -f "$(HOME_DIR)/.zshrc" ] && [ ! -L "$(HOME_DIR)/.zshrc" ]; then \
		echo "⚠️  既存の.zshrcをバックアップ中..."; \
		mv $(HOME_DIR)/.zshrc $(HOME_DIR)/.zshrc.backup.$$(date +%Y%m%d_%H%M%S); \
	fi
	@ln -sfn $(DOTFILES_DIR)/zsh/zshrc $(HOME_DIR)/.zshrc

	@if [ -f "$(DOTFILES_DIR)/zsh/p10k.zsh" ]; then \
		if [ -f "$(HOME_DIR)/.p10k.zsh" ] && [ ! -L "$(HOME_DIR)/.p10k.zsh" ]; then \
			echo "⚠️  既存の.p10k.zshをバックアップ中..."; \
			mv $(HOME_DIR)/.p10k.zsh $(HOME_DIR)/.p10k.zsh.backup.$$(date +%Y%m%d_%H%M%S); \
		fi; \
		ln -sfn $(DOTFILES_DIR)/zsh/p10k.zsh $(HOME_DIR)/.p10k.zsh; \
	fi

	# ZSHをデフォルトシェルに設定
	@if ! grep -q "$$(which zsh)" /etc/shells; then \
		sudo sh -c "echo $$(which zsh) >> /etc/shells"; \
	fi
	@if [ "$$SHELL" != "$$(which zsh)" ]; then \
		echo "⚠️  ZSHをデフォルトシェルに設定するため、以下のコマンドを実行してください:"; \
		echo "    chsh -s $$(which zsh)"; \
	fi

	@echo "✅ ZSHの設定が完了しました。"

# WEZTERMの設定をセットアップ
setup-wezterm:
	@echo "🖥️  WEZTERMの設定をセットアップ中..."
	@mkdir -p $(CONFIG_DIR)/wezterm

	# 既存設定のバックアップ
	@if [ -f "$(CONFIG_DIR)/wezterm/wezterm.lua" ] && [ ! -L "$(CONFIG_DIR)/wezterm/wezterm.lua" ]; then \
		echo "⚠️  既存のwezterm設定をバックアップ中..."; \
		mv $(CONFIG_DIR)/wezterm/wezterm.lua $(CONFIG_DIR)/wezterm/wezterm.lua.backup.$$(date +%Y%m%d_%H%M%S); \
	fi

	# シンボリックリンクを作成
	@ln -sfn $(DOTFILES_DIR)/wezterm/wezterm.lua $(CONFIG_DIR)/wezterm/wezterm.lua

	@echo "✅ WEZTERMの設定が完了しました。"

# VS Codeの設定をセットアップ
setup-vscode:
	@echo "💻 VS Codeの設定をセットアップ中..."
	@mkdir -p $(CONFIG_DIR)/Code/User

	# 既存設定のバックアップ
	@if [ -f "$(CONFIG_DIR)/Code/User/settings.json" ] && [ ! -L "$(CONFIG_DIR)/Code/User/settings.json" ]; then \
		echo "⚠️  既存のVS Code settings.jsonをバックアップ中..."; \
		mv $(CONFIG_DIR)/Code/User/settings.json $(CONFIG_DIR)/Code/User/settings.json.backup.$$(date +%Y%m%d_%H%M%S); \
	fi
	@if [ -f "$(CONFIG_DIR)/Code/User/keybindings.json" ] && [ ! -L "$(CONFIG_DIR)/Code/User/keybindings.json" ]; then \
		echo "⚠️  既存のVS Code keybindings.jsonをバックアップ中..."; \
		mv $(CONFIG_DIR)/Code/User/keybindings.json $(CONFIG_DIR)/Code/User/keybindings.json.backup.$$(date +%Y%m%d_%H%M%S); \
	fi

	# シンボリックリンクを作成
	@ln -sfn $(DOTFILES_DIR)/vscode/settings.json $(CONFIG_DIR)/Code/User/settings.json
	@ln -sfn $(DOTFILES_DIR)/vscode/keybindings.json $(CONFIG_DIR)/Code/User/keybindings.json

	# 拡張機能のインストール
	@if command -v code >/dev/null 2>&1; then \
		echo "📦 VS Code拡張機能をインストール中..."; \
		if [ -f "$(DOTFILES_DIR)/vscode/extensions.list" ]; then \
			INSTALLED_EXTENSIONS=$$(code --list-extensions); \
			while IFS= read -r extension || [ -n "$$extension" ]; do \
				if [ -n "$$extension" ] && ! echo "$$extension" | grep -q '^#' && ! echo "$$extension" | grep -q '^$$'; then \
					if echo "$$INSTALLED_EXTENSIONS" | grep -q "^$$extension$$"; then \
						echo "⏭️  $$extension は既にインストール済みです（スキップ）"; \
					else \
						echo "📦 $$extension をインストール中..."; \
						code --install-extension "$$extension" || echo "⚠️  $$extension のインストールに失敗しました"; \
					fi; \
				fi; \
			done < $(DOTFILES_DIR)/vscode/extensions.list; \
		fi; \
		echo "✅ VS Code拡張機能のインストールが完了しました"; \
	else \
		echo "⚠️  VS Codeがインストールされていません。拡張機能のインストールをスキップします"; \
	fi

	@echo "✅ VS Codeの設定が完了しました。"

# VS Code用のSuperCopilotフレームワークをセットアップ
setup-vscode-copilot:
	@echo "🧠 VS Code用のSuperCopilotフレームワークをセットアップ中..."
	@mkdir -p $(HOME_DIR)/.vscode/copilot-instructions

	# シンボリックリンクを作成
	@ln -sfn $(DOTFILES_DIR)/vscode/copilot-instructions/personas.md $(HOME_DIR)/.vscode/copilot-instructions/personas.md
	@ln -sfn $(DOTFILES_DIR)/vscode/copilot-instructions/commands.md $(HOME_DIR)/.vscode/copilot-instructions/commands.md
	@ln -sfn $(DOTFILES_DIR)/vscode/copilot-instructions/rules.md $(HOME_DIR)/.vscode/copilot-instructions/rules.md

	@echo "✅ VS Code用のSuperCopilotフレームワークのセットアップが完了しました"
	@echo ""
	@echo "📝 VS Code settings.jsonに以下の設定が追加されています:"
	@echo "\"github.copilot.chat.codeGeneration.instructions\": ["
	@echo "  {"
	@echo "    \"file\": \"~/.vscode/copilot-instructions/personas.md\""
	@echo "  },"
	@echo "  {"
	@echo "    \"file\": \"~/.vscode/copilot-instructions/commands.md\""
	@echo "  },"
	@echo "  {"
	@echo "    \"file\": \"~/.vscode/copilot-instructions/rules.md\""
	@echo "  }"
	@echo "]"
	@echo ""

# Cursorの設定をセットアップ
setup-cursor:
	@echo "🖱️  Cursorの設定をセットアップ中..."
	@mkdir -p $(CONFIG_DIR)/Cursor/User

	# 既存設定のバックアップ
	@if [ -f "$(CONFIG_DIR)/Cursor/User/settings.json" ] && [ ! -L "$(CONFIG_DIR)/Cursor/User/settings.json" ]; then \
		echo "⚠️  既存のCursor settings.jsonをバックアップ中..."; \
		mv $(CONFIG_DIR)/Cursor/User/settings.json $(CONFIG_DIR)/Cursor/User/settings.json.backup.$$(date +%Y%m%d_%H%M%S); \
	fi
	@if [ -f "$(CONFIG_DIR)/Cursor/User/keybindings.json" ] && [ ! -L "$(CONFIG_DIR)/Cursor/User/keybindings.json" ]; then \
		echo "⚠️  既存のCursor keybindings.jsonをバックアップ中..."; \
		mv $(CONFIG_DIR)/Cursor/User/keybindings.json $(CONFIG_DIR)/Cursor/User/keybindings.json.backup.$$(date +%Y%m%d_%H%M%S); \
	fi

	# シンボリックリンクを作成
	@ln -sfn $(DOTFILES_DIR)/cursor/settings.json $(CONFIG_DIR)/Cursor/User/settings.json
	@ln -sfn $(DOTFILES_DIR)/cursor/keybindings.json $(CONFIG_DIR)/Cursor/User/keybindings.json

	@echo "✅ Cursorの設定が完了しました。"

# Cursor MCP Toolsの設定をセットアップ
setup-mcp-tools:
	@echo "🔧 Cursor MCP Toolsの設定をセットアップ中..."
	@mkdir -p $(HOME_DIR)/.cursor

	# 既存設定のバックアップ
	@if [ -f "$(HOME_DIR)/.cursor/mcp.json" ] && [ ! -L "$(HOME_DIR)/.cursor/mcp.json" ]; then \
		echo "⚠️  既存のMCP設定をバックアップ中..."; \
		mv $(HOME_DIR)/.cursor/mcp.json $(HOME_DIR)/.cursor/mcp.json.backup.$$(date +%Y%m%d_%H%M%S); \
	fi

	# シンボリックリンクを作成
	@ln -sfn $(DOTFILES_DIR)/cursor/mcp.json $(HOME_DIR)/.cursor/mcp.json

	# 必要な依存関係をインストール
	@echo "📦 MCP Tools必要な依存関係をチェック中..."
	@if ! command -v uvx >/dev/null 2>&1; then \
		echo "⚠️  uvxが見つかりません。インストールしてください:"; \
		echo "   pip install uv"; \
		echo "   または:"; \
		echo "   curl -LsSf https://astral.sh/uv/install.sh | sh"; \
	fi

	@if ! command -v npx >/dev/null 2>&1; then \
		echo "⚠️  npxが見つかりません。Node.jsをインストールしてください"; \
	fi

	@echo "✅ Cursor MCP Toolsの設定が完了しました。"
	@echo "ℹ️  設定されたMCPサーバー:"
	@echo "  - Bitbucket MCP Server: BitbucketのPR管理・コメント機能"
	@echo "  - Playwright MCP Server: ウェブブラウザの自動化"
	@echo "  - AWS Documentation MCP Server: AWS文書の検索・参照"
	@echo "  - Terraform MCP Server: Terraform設定の管理"
	@echo "  - ECS MCP Server: AWS ECSの管理"
	@echo "ℹ️  Cursorを再起動してMCPツールを有効化してください。"

# Git設定のセットアップ
setup-git:
	@echo "🖥️  Git設定をセットアップ中..."

	# 既存のGit設定をチェック
	@CURRENT_EMAIL=$$(git config --global user.email 2>/dev/null || echo ""); \
	CURRENT_NAME=$$(git config --global user.name 2>/dev/null || echo ""); \
	if [ -n "$$CURRENT_EMAIL" ] && [ -n "$$CURRENT_NAME" ]; then \
		echo "✅ Git設定は既に存在します:"; \
		echo "   Name: $$CURRENT_NAME"; \
		echo "   Email: $$CURRENT_EMAIL"; \
	else \
		echo "📧 Git設定をセットアップします。"; \
		if [ -n "$(GIT_USER_NAME)" ]; then \
			GIT_NAME="$(GIT_USER_NAME)"; \
		else \
			read -p "Gitで使用するユーザー名を入力してください: " GIT_NAME; \
		fi; \
		if [ -n "$(EMAIL)" ]; then \
			git config --global user.name "$$GIT_NAME"; \
			git config --global user.email '$(EMAIL)'; \
			echo "✅ Git設定完了 - Name: $$GIT_NAME, Email: $(EMAIL)"; \
		else \
			read -p "Gitで使用するEメールアドレスを入力してください: " EMAIL_INPUT; \
			git config --global user.name "$$GIT_NAME"; \
			git config --global user.email "$$EMAIL_INPUT"; \
			echo "✅ Git設定完了 - Name: $$GIT_NAME, Email: $$EMAIL_INPUT"; \
		fi; \
	fi

	# SSH鍵の生成
	@if [ ! -f "$(HOME_DIR)/.ssh/id_ed25519" ]; then \
		echo "🔑 SSH鍵を生成中..."; \
		CURRENT_EMAIL=$$(git config --global user.email 2>/dev/null || echo ""); \
		if [ -n "$(EMAIL)" ]; then \
			ssh-keygen -t ed25519 -C '$(EMAIL)' -f $(HOME_DIR)/.ssh/id_ed25519 -N ''; \
		elif [ -n "$$CURRENT_EMAIL" ]; then \
			ssh-keygen -t ed25519 -C "$$CURRENT_EMAIL" -f $(HOME_DIR)/.ssh/id_ed25519 -N ''; \
		else \
			read -p "SSH鍵用のEメールアドレスを入力してください: " SSH_EMAIL; \
			ssh-keygen -t ed25519 -C "$$SSH_EMAIL" -f $(HOME_DIR)/.ssh/id_ed25519 -N ''; \
		fi; \
		echo "✅ SSH鍵が生成されました: $(HOME_DIR)/.ssh/id_ed25519.pub"; \
		echo "📋 公開鍵の内容:"; \
		cat $(HOME_DIR)/.ssh/id_ed25519.pub; \
	else \
		echo "✅ SSH鍵は既に存在します。"; \
	fi

	@echo "✅ Git設定が完了しました。"

# Docker設定のセットアップ
setup-docker:
	@echo "🐳 Docker設定をセットアップ中..."

	# 必要なパッケージを先にインストール
	@echo "📦 Docker rootless用の必要パッケージをインストール中..."
	@sudo DEBIAN_FRONTEND=noninteractive apt-get update || true
	@sudo DEBIAN_FRONTEND=noninteractive apt-get install -y uidmap || true

	# 必要なカーネルモジュールをロード
	@echo "🔧 必要なカーネルモジュールをロード中..."
	@sudo modprobe nf_tables || true
	@sudo modprobe iptable_nat || true
	@sudo modprobe ip6table_nat || true

	# AppArmorの設定を確認・修正
	@if [ -f "$(DOTFILES_DIR)/scripts/setup-apparmor.sh" ]; then \
		if [ -x "$(DOTFILES_DIR)/scripts/setup-apparmor.sh" ]; then \
			echo "🔧 AppArmorの設定を確認・修正中..."; \
			$(DOTFILES_DIR)/scripts/setup-apparmor.sh; \
		else \
			echo "❌ エラー: $(DOTFILES_DIR)/scripts/setup-apparmor.sh に実行権限がありません"; \
			echo "   修正するには: chmod +x $(DOTFILES_DIR)/scripts/setup-apparmor.sh"; \
			exit 1; \
		fi; \
	else \
		echo "❌ エラー: $(DOTFILES_DIR)/scripts/setup-apparmor.sh が見つかりません"; \
		echo "   必要なファイルが存在しないため、セットアップを中止します"; \
		exit 1; \
	fi
	# Rootless Dockerのセットアップ
	@if ! command -v dockerd-rootless-setuptool.sh >/dev/null 2>&1; then \
		echo "📦 Rootless Dockerをインストール中..."; \
		curl -fsSL https://get.docker.com/rootless | sh; \
	fi

	# rootless setuptoolの実行（エラーが発生してもスキップするオプション付き）
	@echo "⚙️  Rootless Dockerをセットアップ中..."
	@dockerd-rootless-setuptool.sh install --skip-iptables || \
	dockerd-rootless-setuptool.sh install || \
	echo "⚠️  Rootless Docker setup completed with warnings (this is often normal)"

	# サービスの設定
	@echo "🚀 Dockerサービスの設定中..."
	@systemctl --user enable docker.service || true
	@systemctl --user start docker.service || true
	@sudo loginctl enable-linger $(USER) || true

	# Docker Composeのセットアップ
	@echo "🐙 Docker Composeの設定中..."
	@mkdir -p $(HOME_DIR)/.docker/cli-plugins
	@if command -v brew >/dev/null 2>&1; then \
		eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"; \
		ln -sfn $$(brew --prefix)/opt/docker-compose/bin/docker-compose $(HOME_DIR)/.docker/cli-plugins/docker-compose || true; \
	fi

	# 環境変数の設定確認
	@echo "🔍 Docker環境の確認中..."
	@if ! grep -q "DOCKER_HOST" $(DOTFILES_DIR)/zsh/zshrc 2>/dev/null; then \
		echo "export DOCKER_HOST=unix:///run/user/$$(id -u)/docker.sock" >> $(DOTFILES_DIR)/zsh/zshrc || true; \
	fi

	@echo "✅ Docker設定が完了しました。"
	@echo "ℹ️  ターミナルを再起動してからDockerを使用してください。"

# 追加の開発環境設定
setup-development:
	@echo "⚙️  追加の開発環境設定を実行中..."

	# Tilixの設定
	@if [ -f "$(DOTFILES_DIR)/tilix/tilix.dconf" ]; then \
		echo "🖥️  Tilix設定を読み込み中..."; \
		dconf load /com/gexperts/Tilix/ < $(DOTFILES_DIR)/tilix/tilix.dconf || true; \
		echo "✅ Tilix設定が読み込まれました"; \
	else \
		echo "⚠️  Tilix設定ファイルが見つかりません: $(DOTFILES_DIR)/tilix/tilix.dconf"; \
	fi

	# logiopsの設定（設定ファイルが存在する場合）
	@if [ -f "$(DOTFILES_DIR)/logid/logid.cfg" ]; then \
		echo "🖱️  logiops設定をセットアップ中..."; \
		echo "⚠️  注意: logiopsの依存関係を事前にインストールしてください"; \
		echo "   必要な依存関係: cmake libevdev-dev libudev-dev libconfig++-dev"; \
		echo "   インストールコマンド: sudo apt install -y cmake libevdev-dev libudev-dev libconfig++-dev"; \
		echo "   または、make setup-logiops-deps を実行してください"; \
		if [ ! -L "/etc/logid.cfg" ]; then \
			if [ -f "/etc/logid.cfg" ]; then \
				echo "⚠️  既存のlogid設定をバックアップ中..."; \
				sudo mv /etc/logid.cfg /etc/logid.cfg.backup.$$(date +%Y%m%d_%H%M%S) || true; \
			fi; \
		fi; \
		sudo ln -sfn $(DOTFILES_DIR)/logid/logid.cfg /etc/logid.cfg || true; \
		sudo systemctl enable logid || true; \
		echo "✅ logiops設定が完了しました"; \
		echo "ℹ️  logiopsサービスを開始するには: sudo systemctl start logid"; \
	else \
		echo "⚠️  logid設定ファイルが見つかりません: $(DOTFILES_DIR)/logid/logid.cfg"; \
	fi

	@echo "✅ 追加の開発環境設定が完了しました。"

# logiops依存関係のインストール
setup-logiops-deps:
	@echo "🖱️  logiops依存関係をインストール中..."
	@echo "📦 必要な依存関係: cmake libevdev-dev libudev-dev libconfig++-dev"
	@sudo DEBIAN_FRONTEND=noninteractive apt-get update || true
	@sudo DEBIAN_FRONTEND=noninteractive apt-get install -y cmake libevdev-dev libudev-dev libconfig++-dev || true
	@echo "✅ logiops依存関係のインストールが完了しました"
	@echo "ℹ️  logiopsの設定を適用するには: make setup-development"

# キーボードショートカットの設定
setup-shortcuts:
	@echo "⌨️  キーボードショートカットの設定を実行中..."

	# ウィンドウマネージャのキーバインド設定
	@if [ -f "$(DOTFILES_DIR)/gnome-shortcuts/wm-keybindings.dconf" ]; then \
		echo "🪟 ウィンドウマネージャのキーバインド設定を読み込み中..."; \
		dconf load /org/gnome/desktop/wm/keybindings/ < $(DOTFILES_DIR)/gnome-shortcuts/wm-keybindings.dconf || true; \
		echo "✅ ウィンドウマネージャのキーバインド設定が読み込まれました"; \
	else \
		echo "ℹ️  ウィンドウマネージャのキーバインド設定ファイルが見つかりません: $(DOTFILES_DIR)/gnome-shortcuts/wm-keybindings.dconf"; \
	fi

	# メディアキーのキーバインド設定
	@if [ -f "$(DOTFILES_DIR)/gnome-shortcuts/media-keybindings.dconf" ]; then \
		echo "🎵 メディアキーのキーバインド設定を読み込み中..."; \
		dconf load /org/gnome/settings-daemon/plugins/media-keys/ < $(DOTFILES_DIR)/gnome-shortcuts/media-keybindings.dconf || true; \
		echo "✅ メディアキーのキーバインド設定が読み込まれました"; \
	else \
		echo "ℹ️  メディアキーのキーバインド設定ファイルが見つかりません: $(DOTFILES_DIR)/gnome-shortcuts/media-keybindings.dconf"; \
	fi

	# カスタムキーバインド設定
	@if [ -f "$(DOTFILES_DIR)/gnome-shortcuts/custom-keybindings.dconf" ]; then \
		echo "🔧 カスタムキーバインド設定を読み込み中..."; \
		dconf load /org/gnome/settings-daemon/plugins/media-keys/custom-keybindings/ < $(DOTFILES_DIR)/gnome-shortcuts/custom-keybindings.dconf || true; \
		echo "✅ カスタムキーバインド設定が読み込まれました"; \
	else \
		echo "ℹ️  カスタムキーバインド設定ファイルが見つかりません: $(DOTFILES_DIR)/gnome-shortcuts/custom-keybindings.dconf"; \
	fi

	# ターミナルキーバインド設定（GNOME Terminal）
	@if [ -f "$(DOTFILES_DIR)/gnome-shortcuts/terminal-keybindings.dconf" ]; then \
		echo "🖥️  ターミナルキーバインド設定を読み込み中..."; \
		dconf load /org/gnome/terminal/legacy/keybindings/ < $(DOTFILES_DIR)/gnome-shortcuts/terminal-keybindings.dconf || true; \
		echo "✅ ターミナルキーバインド設定が読み込まれました"; \
	else \
		echo "ℹ️  ターミナルキーバインド設定ファイルが見つかりません: $(DOTFILES_DIR)/gnome-shortcuts/terminal-keybindings.dconf"; \
	fi

	@echo "✅ キーボードショートカットの設定が完了しました。"
	@echo "⚠️  設定を反映するため、一度ログアウト・ログインすることを推奨します。"

# 日本語入力環境の設定
setup-ime:
	@echo "🈹 日本語入力環境をセットアップ中..."

	# IBusの設定確認
	@if ! command -v ibus >/dev/null 2>&1; then \
		echo "❌ IBusがインストールされていません。"; \
		echo "   インストールコマンド: sudo apt install -y ibus ibus-mozc"; \
		exit 1; \
	fi

	# Mozcエンジンの確認
	@if ! ibus list-engine | grep -q mozc; then \
		echo "❌ Mozcエンジンが見つかりません。"; \
		echo "   インストールコマンド: sudo apt install -y ibus-mozc"; \
		exit 1; \
	fi

	# IBusデーモンの再起動
	@echo "🔄 IBusデーモンを再起動中..."
	@pkill -f ibus-daemon || true
	@sleep 2
	@ibus-daemon -drx || true

	# 設定確認とアドバイス
	@echo "✅ 日本語入力環境のセットアップが完了しました。"
	@echo ""
	@echo "📋 追加で必要な設定:"
	@echo "   1. システム設定 > 地域と言語 > 入力ソース でMozcを追加"
	@echo "   2. ターミナルを再起動して環境変数を適用"
	@echo "   3. WezTermでCtrl+SpaceまたはAlt+半角/全角で日本語入力を切り替え"
	@echo ""
	@echo "🔧 手動で日本語入力を設定する場合:"
	@echo "   ibus-setup を実行して手動設定してください"

# ========================================
# 新しい階層的な命名規則のターゲット
# ========================================

# 設定ファイル・コンフィグセットアップ系
setup-config-vim: setup-vim
setup-config-zsh: setup-zsh
setup-config-wezterm: setup-wezterm
setup-config-vscode: setup-vscode
setup-config-vscode-copilot: setup-vscode-copilot
setup-config-cursor: setup-cursor
setup-config-mcp-tools: setup-mcp-tools
setup-config-git: setup-git
setup-config-docker: setup-docker
setup-config-development: setup-development
setup-config-shortcuts: setup-shortcuts
setup-config-ime: setup-ime
setup-config-claude: setup-claude

# ========================================
# Claude Code設定のセットアップ
# ========================================

setup-claude: ## Claude Code設定ファイルのセットアップ
	@echo "🤖 Claude Code設定をセットアップ中..."

	# Claude設定ディレクトリの作成
	@mkdir -p $(HOME_DIR)/.config/claude

	# Claude設定ファイルのコピー
	@if [ -f "$(DOTFILES_DIR)/claude/claude-settings.json" ]; then \
		echo "📋 Claude設定ファイルをコピー中..."; \
		cp "$(DOTFILES_DIR)/claude/claude-settings.json" "$(HOME_DIR)/.config/claude/claude-settings.json" && \
		echo "✅ Claude設定ファイルが正常にコピーされました"; \
	else \
		echo "⚠️ Claude設定ファイルが見つかりません: $(DOTFILES_DIR)/claude/claude-settings.json"; \
	fi

	# Claude CLIの設定確認
	@if command -v claude >/dev/null 2>&1; then \
		echo "✅ Claude CLIが利用可能です"; \
		echo "   バージョン: $$(claude --version 2>/dev/null || echo '取得できませんでした')"; \
		echo "   設定ディレクトリ: $(HOME_DIR)/.config/claude"; \
	else \
		echo "ℹ️ Claude CLIがインストールされていません"; \
		echo "   'make install-claude-ecosystem' でClaude Code関連ツールをインストールできます"; \
	fi

	# CLAUDE.mdファイルのリンク作成
	@if [ -f "$(DOTFILES_DIR)/CLAUDE.md" ]; then \
		echo "📖 CLAUDE.mdドキュメントをホームディレクトリにリンク中..."; \
		ln -sf "$(DOTFILES_DIR)/CLAUDE.md" "$(HOME_DIR)/CLAUDE.md" && \
		echo "✅ CLAUDE.mdドキュメントがリンクされました: ~/CLAUDE.md"; \
	else \
		echo "⚠️ CLAUDE.mdドキュメントが見つかりません"; \
	fi

	@echo "✅ Claude Code設定のセットアップが完了しました"
	@echo "📚 詳細なガイドは ~/CLAUDE.md を参照してください"

# ========================================
# 後方互換性のためのエイリアス
# ========================================

# 古いターゲット名を維持（既に実装済み）
# setup-vim: は既に実装済み
# setup-zsh: は既に実装済み
# setup-wezterm: は既に実装済み
# その他の既存ターゲットはそのまま

# Claude設定をセットアップ
setup-claude:
	@echo "🤖 Claude設定をセットアップ中..."
	@mkdir -p $(HOME_DIR)/.claude

	# CLAUDE.mdのシンボリックリンク作成
	@if [ -f "$(HOME_DIR)/.claude/CLAUDE.md" ] && [ ! -L "$(HOME_DIR)/.claude/CLAUDE.md" ]; then \
		echo "⚠️  既存のCLAUDE.mdをバックアップ中..."; \
		mv $(HOME_DIR)/.claude/CLAUDE.md $(HOME_DIR)/.claude/CLAUDE.md.backup.$$(date +%Y%m%d_%H%M%S); \
	fi
	@ln -sfn $(DOTFILES_DIR)/CLAUDE.md $(HOME_DIR)/.claude/CLAUDE.md

	# claude-settings.jsonのシンボリックリンク作成
	@if [ -f "$(HOME_DIR)/.claude/claude-settings.json" ] && [ ! -L "$(HOME_DIR)/.claude/claude-settings.json" ]; then \
		echo "⚠️  既存のclaude-settings.jsonをバックアップ中..."; \
		mv $(HOME_DIR)/.claude/claude-settings.json $(HOME_DIR)/.claude/claude-settings.json.backup.$$(date +%Y%m%d_%H%M%S); \
	fi
	@ln -sfn $(DOTFILES_DIR)/claude-settings.json $(HOME_DIR)/.claude/claude-settings.json

	@echo "✅ Claude設定が完了しました。"
	@echo "   設定ファイル: ~/.claude/CLAUDE.md -> $(DOTFILES_DIR)/CLAUDE.md"
	@echo "   設定ファイル: ~/.claude/claude-settings.json -> $(DOTFILES_DIR)/claude-settings.json"

# 設定ファイル・コンフィグセットアップ系
setup-config-claude: setup-claude
