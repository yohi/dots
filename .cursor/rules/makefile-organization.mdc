---
description: Makefile分割・保守に関するルール - プロジェクトのMakefileを機能別に分割し、保守性を向上させるためのガイドライン
globs:
  - "Makefile"
  - "mk/*.mk"
  - "**/*.mk"
alwaysApply: false
---

# Makefile Organization Rules
このプロジェクトのMakefile分割・保守に関するルール

## 全般的な方針

### 1. Makefileの構造化
- 大きなMakefile（1000行以上）は機能別に分割する
- メインMakefileはincludeディレクティブのみを含み、実装は分割ファイルに配置
- 分割ファイルは`mk/`ディレクトリに格納する

### 2. ファイル命名規則
- 分割ファイル名は機能を表す英語名.mkとする
- 例: `variables.mk`, `help.mk`, `system.mk`, `install.mk`
- ファイル名は小文字とハイフンを使用（アンダースコアは避ける）

## 分割ファイルの分類と責任範囲

### Core Files（基本ファイル）
- `variables.mk`: 変数定義、PHONYターゲット宣言
- `help.mk`: ヘルプメッセージとターゲット説明

### Functional Files（機能別ファイル）
- `system.mk`: システムレベル設定（フォント、ロケール、基本パッケージ）
- `install.mk`: アプリケーションインストール（Homebrew、DEB、Flatpak）
- `setup.mk`: 設定ファイルのセットアップ（vim, zsh, git等）
- `gnome.mk`: GNOME関連設定
- `mozc.mk`: 日本語入力関連
- `extensions.mk`: 拡張機能関連
- `clean.mk`: クリーンアップ関連
- `main.mk`: 統合ターゲット、デバッグ機能

## コーディング規則

### 1. include順序
メインMakefileでのinclude順序は以下を遵守：
```makefile
include mk/variables.mk    # 最初：変数定義
include mk/help.mk         # 2番目：ヘルプ
include mk/system.mk       # 機能別ファイル
include mk/install.mk
include mk/setup.mk
include mk/gnome.mk
include mk/mozc.mk
include mk/extensions.mk
include mk/clean.mk
include mk/main.mk         # 最後：統合機能
```

### 2. ターゲット命名規則
- アクション-対象の形式：`setup-vim`, `install-homebrew`
- 複数単語はハイフンで区切る：`setup-gnome-extensions`
- 動詞から始める：`install-`, `setup-`, `clean-`, `backup-`

### 3. コメント記述
- ファイル冒頭に機能説明を記述
- 各ターゲットの前に1行コメントで説明
- 複雑な処理には詳細コメントを追加
- 日本語と英語の併用可（一貫性を保つ）

```makefile
# システムレベル設定関連のターゲット

# フォントとロケールの設定
system-setup:
    @echo "🖥️  システム設定を開始中..."
    # Ubuntu 25.04対応のパッケージ名を使用
    @sudo apt install -y fonts-noto-cjk
```

### 4. エコーメッセージ統一
- 絵文字と日本語を使用してユーザーフレンドリーに
- 進行状況がわかりやすい表現
- エラー処理も適切にメッセージ出力

```makefile
@echo "📦 パッケージをインストール中..."
@echo "✅ インストールが完了しました"
@echo "⚠️  警告: 設定ファイルが見つかりません"
@echo "❌ エラー: インストールに失敗しました"
```

### 5. 変数の管理
- 全ての変数は`variables.mk`で定義
- 環境固有の値は変数化して再利用性を高める
- 変数名はUPPER_CASE_WITH_UNDERSCORESを使用

```makefile
DOTFILES_DIR := $(CURDIR)
CONFIG_DIR := $(HOME)/.config
HOME_DIR := $(HOME)
```

### 6. PHONYターゲット
- 全てのターゲットは`variables.mk`でPHONYに指定
- ファイル生成を伴わないターゲットは必ずPHONY指定

### 7. エラーハンドリング
- 継続可能なエラーには`|| true`を使用
- 重要な処理の失敗時は適切なエラーメッセージを出力
- 条件分岐でファイル/コマンドの存在確認を行う

```makefile
@if command -v brew >/dev/null 2>&1; then \
    brew install package || echo "⚠️ インストールに失敗しました"; \
else \
    echo "❌ Homebrewが見つかりません"; \
fi
```

## 新機能追加時のガイドライン

### 1. 機能の分類
- システム設定 → `system.mk`
- アプリインストール → `install.mk`
- 設定ファイル → `setup.mk`
- GNOME関連 → `gnome.mk`
- その他専用機能 → 新しい.mkファイル

### 2. ヘルプメッセージの更新
新しいターゲットを追加したら`help.mk`のヘルプメッセージも同時に更新

### 3. 統合ターゲットの更新
主要な新機能は`main.mk`の`setup-all`に組み込む

## 保守性向上のポイント

### 1. 単一責任の原則
- 各ファイルは単一の機能領域に責任を持つ
- 機能横断的な処理は適切なファイルに配置または新ファイル作成

### 2. 依存関係の明確化
- ターゲット間の依存関係を明確にする
- 前提条件の確認処理を含める

### 3. テスタビリティ
- デバッグ用ターゲットで各機能の状態確認を可能にする
- 段階的実行ができるよう細かくターゲットを分割

### 4. ドキュメント化
- READMEファイルに分割構造の説明を記載
- 各ファイルの役割と使用方法を明記

## 注意事項

### 1. Ubuntu特有の設定
- Ubuntu 25.04対応のパッケージ名使用
- PPAの可用性確認
- 権限が必要な処理はsudo使用

### 2. 日本語環境対応
- ロケール設定
- 日本語フォント
- 日本語入力（Mozc）

### 3. 開発環境の一貫性
- 複数のエディタ（VS Code、Cursor）対応
- 統一された設定ファイル管理
- シンボリックリンクによる設定の同期

これらのルールに従って、保守しやすく拡張可能なMakefile構造を維持してください。
