# Fig pre block. Keep at the top of this file.
[[ -f "$HOME/.fig/shell/zshrc.pre.zsh" ]] && builtin source "$HOME/.fig/shell/zshrc.pre.zsh"
# Enable Powerlevel10k instant prompt. Should stay close to the top of ~/.zshrc.
# Initialization code that may require console input (password prompts, [y/n] confirmations, etc.) must go above this block; everything else may go below.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

export LANG=ja_JP.UTF-8

###########################3 
###########################3 autoload -Uz colors
###########################3 colors
###########################3 
# コマンドのスペルミスを指摘
setopt correct
###########################3 
###########################3 #bindkey -v
###########################3 #bindkey -a
###########################3 
###########################3 case ${OSTYPE} in
###########################3   darwin*)
###########################3     # MAC
###########################3     PROMPT='%F{red}[%n@%m]%f %~
###########################3 %% '
###########################3     export PATH="/usr/local/sbin:$PATH"
###########################3     #export PATH=$PATH:/Applications/MAMP/Library/bin
###########################3     ;;
###########################3   linux*)
###########################3     # LINUX
###########################3     PROMPT='%F{blue}[%n@%m]%f %~
###########################3 %% '
###########################3     ;;
###########################3 esac
###########################3 
###########################3 
###########################3 fpath=(/usr/local/share/zsh-completions $fpath)
###########################3 
alias la="ls -a"
alias ll="ls -l"
alias du="du -h"
alias df="df -h"
alias ld="lazydocker"
alias lg="lazygit"
alias mkdirdate="mkdir $(date +"%Y%m%d") && cd $(date +"%Y%m%d")"
alias mkdirdatetime="mkdir $(date +"%Y%m%d%I%M%S")"

# 作業ディレクトリの作成
#WORKDIR="/tmp/${DATETIME}_$$"
#mkdir ${WORKDIR}

###########################3 
# ls で ディレクトリに色を付ける
autoload -U compinit
compinit -u
###########################3 
###########################3 export LSCOLORS=exfxcxdxbxegedabagacad
###########################3 export LS_COLORS='di=34:ln=35:so=32:pi=33:ex=31:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30'
###########################3 
###########################3 alias ls="ls -GF"
###########################3 alias gls="gls --color"
###########################3 
###########################3 zstyle ':completion:*' list-colors 'di=34' 'ln=35' 'so=32' 'ex=31' 'bd=46;34' 'cd=43;34'
###########################3 
# DELETE KEY 有効化
bindkey "^[[3~" delete-char
###########################3 
###########################3 # powerline-shell
###########################3 #function powerline_precmd() {
###########################3 #    PS1="$(~/powerline-shell.py $? --shell zsh 2> /dev/null)"
###########################3 #}
###########################3 #
###########################3 #function install_powerline_precmd() {
###########################3 #  for s in "${precmd_functions[@]}"; do
###########################3 #    if [ "$s" = "powerline_precmd" ]; then
###########################3 #      return
###########################3 #    fi
###########################3 #  done
###########################3 #  precmd_functions+=(powerline_precmd)
###########################3 #}
###########################3 #
###########################3 #if [ "$TERM" != "linux" ]; then
###########################3 #    install_powerline_precmd
###########################3 #fi
###########################3 
#
# HOMEBREW
export PATH=/home/${USER}/bin:${PATH}
export PATH=${PATH}:/sbin
eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

#     echo '# Set PATH, MANPATH, etc., for Homebrew.' >> /home/y_ohi/.zprofile
#     echo 'eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"' >> /home/y_ohi/.zprofile
#     eval "$(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"

# export PATH="/usr/local/bin:/usr/local/sbin:$PATH"
# export PATH="/usr/local/opt/mysql@5.7/bin:$PATH"

# SSH AGENT TODO
# eval $(ssh-agent)

# # ROOTLESS DOCKER
export DOCKER_HOST=unix://$XDG_RUNTIME_DIR/docker.sock

# # DOCKER BUILDKIT
export DOCKER_BUILDKIT=1
export COMPOSE_DOCKER_CLI_BUILD=1



# dockerコンテナに入る。deで実行できる
alias de='docker exec -it $(docker ps | peco | cut -d " " -f 1) /bin/bash'

# エクスプローラオープン
alias open='xdg-open .'

# ZSH実行時のコメント許可
setopt interactivecomments

# コマンド履歴系
#
# 履歴ファイルの保存先
export HISTFILE=${HOME}/.zsh_history

# メモリに保存される履歴の件数
export HISTSIZE=10000

# 履歴ファイルに保存される履歴の件数
export SAVEHIST=1000000

# コマンド履歴共有
setopt share_history

# ヒストリに追加されるコマンド行が古いものと同じなら古いものを削除
setopt hist_ignore_all_dups

# スペースで始まるコマンド行はヒストリリストから削除
setopt hist_ignore_space

# ヒストリを呼び出してから実行する間に一旦編集可能
setopt hist_verify

# 余分な空白は詰めて記録
setopt hist_reduce_blanks

# 古いコマンドと同じものは無視
setopt hist_save_no_dups

# historyコマンドは履歴に登録しない
setopt hist_no_store

# 補完時にヒストリを自動的に展開
setopt hist_expand

# 履歴をインクリメンタルに追加
setopt inc_append_history

# 開始と終了を記録
setopt EXTENDED_HISTORY



# export PATH="/home/linuxbrew/.linuxbrew/opt/mysql@5.7/bin:$PATH"
# export LDFLAGS="-L/home/linuxbrew/.linuxbrew/opt/mysql@5.7/lib"
# export CPPFLAGS="-I/home/linuxbrew/.linuxbrew/opt/mysql@5.7/include"
# export PKG_CONFIG_PATH="/home/linuxbrew/.linuxbrew/opt/mysql@5.7/lib/pkgconfig"

export VISUAL=nvim
export EDITOR=nvim
unset LESSEDIT


# peco settings
# 過去に実行したコマンドを選択。ctrl-rにバインド
function peco-select-history() {
  BUFFER=$(\history -n -r 1 | peco --query "$LBUFFER")
  CURSOR=$#BUFFER
  zle clear-screen
}
zle -N peco-select-history
bindkey '^r' peco-select-history

# search a destination from cdr list
function peco-get-destination-from-cdr() {
  cdr -l | \
  sed -e 's/^[[:digit:]]*[[:blank:]]*//' | \
  peco --query "$LBUFFER"
}

### 過去に移動したことのあるディレクトリを選択。ctrl-uにバインド
function peco-cdr() {
  local destination="$(peco-get-destination-from-cdr)"
  if [ -n "$destination" ]; then
    BUFFER="cd $destination"
    zle accept-line
  else
    zle reset-prompt
  fi
}
zle -N peco-cdr
bindkey '^u' peco-cdr

###
function ec2-ssm() {
    local profile=$(aws configure list-profiles | peco )
    local instance_id=$(aws --profile ${profile} ec2 describe-instances --filter "Name=instance-state-name,Values=running" "Name=dns-name,Values=" | \
        jq -r '.Reservations[].Instances[] | .InstanceId + " " +  (.Tags[] | select(.Key=="Name").Value)' | \
        peco | awk '{print $1}')
    aws --profile ${profile} ssm start-session --target ${instance_id}
}
zle -N ec2-ssm

function awslogs() {
    local profile=$(aws configure list-profiles | peco )
    local log_group_name=$(aws --profile ${profile} logs describe-log-groups | jq -r '.logGroups[].logGroupName' | peco)
    aws --profile ${profile} logs tail ${log_group_name} --follow
}
zle -N awslogs

# ブランチを簡単切り替え。git checkout lbで実行できる
alias -g lb='`git branch | peco --prompt "GIT BRANCH>" | head -n 1 | sed -e "s/^\*\s*//g"`'

# export DENO_INSTALL=$HOME/.deno
# export PATH="$DENO_INSTALL/bin:$PATH"

# dockerコンテナに入る。deで実行できる
alias de='docker exec -it $(docker ps | peco | cut -d " " -f 1) /bin/bash'

# エクスプローラオープン
alias open='xdg-open .'




# export PATH="/home/linuxbrew/.linuxbrew/opt/mysql@5.7/bin:$PATH"
# export LDFLAGS="-L/home/linuxbrew/.linuxbrew/opt/mysql@5.7/lib"
# export CPPFLAGS="-I/home/linuxbrew/.linuxbrew/opt/mysql@5.7/include"
# export PKG_CONFIG_PATH="/home/linuxbrew/.linuxbrew/opt/mysql@5.7/lib/pkgconfig"

export VISUAL=nvim
export EDITOR=nvim
unset LESSEDIT

export GOPATH=$HOME/.go
export PATH=$PATH:$GOPATH/bin

# eval export PATH="/home/y_ohi/.nodenv/shims:${PATH}"
# export NODENV_SHELL=zsh
# source '/home/linuxbrew/.linuxbrew/Cellar/nodenv/1.4.0/libexec/../completions/nodenv.zsh'
# command nodenv rehash 2>/dev/null
# nodenv() {
#   local command
#   command="${1:-}"
#   if [ "$#" -gt 0 ]; then
#     shift
#   fi
# 
#   case "$command" in
#   rehash|shell)
#     eval "$(nodenv "sh-$command" "$@")";;
#   *)
#     command nodenv "$command" "$@";;
#   esac
# }
#


export EDITOR=nvim
eval "$(direnv hook zsh)"




# export PATH="/home/linuxbrew/.linuxbrew/opt/openssl@3/bin:$PATH"
#
# export PATH="/home/linuxbrew/.linuxbrew/opt/python@3.10/bin:$PATH"
# export LDFLAGS="-L/home/linuxbrew/.linuxbrew/opt/python@3.10/lib"
# export CPPFLAGS="-I/home/linuxbrew/.linuxbrew/opt/python@3.10/include"
# export PKG_CONFIG_PATH="/home/linuxbrew/.linuxbrew/opt/python@3.10/lib/pkgconfig"
alias pip='pip3'
alias python='python3'
export PATH="/home/linuxbrew/.linuxbrew/opt/python@3.11/libexec/bin:$PATH"

# function nvimvenv {
#   if [[ -e "$VIRTUAL_ENV" && -f "$VIRTUAL_ENV/bin/activate" ]]; then
#     source "$VIRTUAL_ENV/bin/activate"
#     command nvim $@
#     deactivate
#   else
#     command nvim $@
#   fi
# }
# 
# alias nvim=nvimvenv

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh



### Added by Zinit's installer
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
    print -P "%F{33} %F{220}Installing %F{33}ZDHARMA-CONTINUUM%F{220} Initiative Plugin Manager (%F{33}zdharma-continuum/zinit%F{220})…%f"
    command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
        print -P "%F{33} %F{34}Installation successful.%f%b" || \
        print -P "%F{160} The clone has failed.%f%b"
fi

source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# Load a few important annexes, without Turbo
# (this is currently required for annexes)
zinit light-mode for \
    zdharma-continuum/zinit-annex-as-monitor \
    zdharma-continuum/zinit-annex-bin-gem-node \
    zdharma-continuum/zinit-annex-patch-dl \
    zdharma-continuum/zinit-annex-rust

zinit light zdharma/fast-syntax-highlighting
zinit light zdharma/history-search-multi-word
zinit light zsh-users/zsh-autosuggestions
zinit light junegunn/fzf-bin

# Load powerlevel10k theme
zinit ice depth"1"
zinit light romkatv/powerlevel10k

# 残骸
# # Load a few important annexes, without Turbo
# # (this is currently required for annexes)
# zinit ice from"gh-r" as"program"
# zinit light-mode for \
# zinit wait lucid atload"zicompinit; zicdreplay" blockf for zsh-users/zsh-completions


### End of Zinit's installer chunk

# To customize prompt, run `p10k configure` or edit ~/.p10k.zsh.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh


alias kgnome='killall -3 gnome-shell'

# Fig post block. Keep at the bottom of this file.
[[ -f "$HOME/.fig/shell/zshrc.post.zsh" ]] && builtin source "$HOME/.fig/shell/zshrc.post.zsh"
